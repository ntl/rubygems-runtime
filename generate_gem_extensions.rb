#!/usr/bin/env ruby

puts <<~TEXT

Generate gem_extensions.rb
= = =

TEXT

require 'rubygems'

require_relative 'load_path'
require 'bundler/setup'

require 'pry'

target_path = 'lib/rubygems/runtime/gem_extensions.rb'

spec = Gem::Specification.load('rubygems-runtime.gemspec')

source_code_uri = spec.metadata['source_code_uri']
generator_url = "#{source_code_uri}/blob/master/#{File.basename($PROGRAM_NAME)}"

puts "Target Path: #{target_path}"
puts "URL: #{generator_url}"

contents_io = StringIO.new

contents_io.write(<<~RUBY)
  # Generated by #{generator_url}
  module RubyGems
    module Runtime
      module GemExtensions
        @@win_platform = nil

        WIN_PATTERNS = #{Gem::WIN_PATTERNS.inspect}

        def ruby
          ::RbConfig.ruby
        end

        def target_rbconfig
          ::RbConfig::CONFIG
        end

        def path
          [default_dir]
        end

RUBY

platform_predicate_methods = Gem.methods.grep(/_platform\?$/)

[
  :ruby_api_version,
  :extension_api_version,
  :default_dir,
  :location_of_caller,
  *platform_predicate_methods
].each_with_index do |method_name, index|
  method = Gem.method(method_name)

  unmodified_source = method.source

  modified_source = unmodified_source.
    sub('def self.', 'def ').
    gsub(/^/, '    ')

  if index > 0
    contents_io.puts
  end

  ruby_lib_dir = File.join(
    RbConfig::CONFIG['rubylibprefix'],
    RbConfig::CONFIG['ruby_version']
  )

  absolute_file, line = method.source_location

  file = absolute_file.delete_prefix(File.join(ruby_lib_dir, ''))

  contents_io.puts "      # Copied from RubyGems v#{Gem::VERSION} lib/#{file}:#{line}"

  contents_io.write(modified_source)
end

contents_io.write(<<~RUBY)
    end
  end
end
RUBY

contents = contents_io.string

puts <<~TEXT

\e[1;4mContents:\e[m
#{contents.chomp}
TEXT

bytes_written = File.write(target_path, contents)

puts <<~TEXT

Wrote #{bytes_written} bytes

Done (#{File.basename($PROGRAM_NAME)})
TEXT
